{"version":3,"sources":["components/TableViewForStops.js","components/MainComponent.js","components/TableViewForStopsDetails.js","components/StopDetails.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["TableViewForStops","data","useState","setstate","forEach","element","id","index","indexOf","splice","className","Paper","elevation","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","component","scope","name","products","bus","tram","ferry","suburban","express","regional","to","localStorage","getItem","onClick","e","stopId","removeItem","setItem","MainComponent","stop","setstop","stopsList","setstopsList","console","log","useEffect","client","createClient","vbbProfile","locations","results","then","catch","error","FormControl","InputLabel","htmlFor","Input","value","onChange","event","target","startAdornment","InputAdornment","position","TableViewForStopsDetails","Card","direction","platform","plannedWhen","require","StopDetails","useParams","departuresDetails","setdeparturesDetails","departures","duration","App","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38d4a7c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid } from '@material-ui/core';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\nexport default function TableViewForStops({ data }) {\r\n\r\n    const [state, setstate] = useState()\r\n    data.forEach(element => {\r\n        if (element.id === null) {\r\n            const index = data.indexOf(element)\r\n            data.splice(index, 1)\r\n        }\r\n        \r\n    });\r\n\r\n    const setFav = (stopId) => {\r\n        localStorage.setItem(stopId, \"fav\")\r\n        setstate({})\r\n    }\r\n\r\n    const removeFav = (stopId) => {\r\n        localStorage.removeItem(stopId)\r\n        setstate({})\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            <Paper elevation={3} className=\"paper\" >\r\n            <TableContainer >\r\n                <Table className=\"\" aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Stops</TableCell>\r\n                            <TableCell align=\"right\">Bus</TableCell>\r\n                            <TableCell align=\"right\">Tram</TableCell>\r\n                            <TableCell align=\"right\">Ferry</TableCell>\r\n                            <TableCell align=\"right\">Suburban</TableCell>\r\n                            <TableCell align=\"right\">Express</TableCell>\r\n                            <TableCell align=\"right\">Regional</TableCell>\r\n                            <TableCell align=\"right\">See More</TableCell>\r\n                            <TableCell align=\"right\">Mark Favourite</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((row) => (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.products?.bus === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\">{row.products?.tram === true ? <DoneIcon />  : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\">{row.products?.ferry === true ? <DoneIcon />  : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\">{row.products?.suburban === true ? <DoneIcon />  : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\"> {row.products?.express === true ? <DoneIcon />  : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\">{row.products?.regional === true ? <DoneIcon />  : <ClearIcon></ClearIcon>}</TableCell>\r\n                                <TableCell align=\"right\"><Link to={row.id}>See more</Link></TableCell>\r\n                                <TableCell align=\"right\">\r\n                                {localStorage.getItem(row.id) === \"fav\" ?\r\n                                        <FavoriteIcon onClick={e => { removeFav(row.id); }}>SetFav</FavoriteIcon> : <FavoriteBorderIcon onClick={e => {setFav(row.id)}}>RemFav</FavoriteBorderIcon>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport createClient from \"hafas-client\";\r\nimport vbbProfile from \"hafas-client/p/vbb\";\r\nimport TableViewForStops from \"./TableViewForStops\";\r\nimport { FormControl, Input, InputAdornment, InputLabel } from \"@material-ui/core\";\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\n\r\nconst MainComponent = () => {\r\n    const [stop, setstop] = useState(\"Airport\");\r\n    const [stopsList, setstopsList] = useState([]);\r\n    console.log(\"*\", stop);\r\n\r\n    useEffect(() => {\r\n        const client = createClient(vbbProfile, \"my-awesome-program\");\r\n\r\n        if (stop !== \"\") {\r\n            client\r\n                .locations(stop, { results: 5 })\r\n                .then((stopsList) => {\r\n                    console.log(stopsList);\r\n                    setstopsList(stopsList);\r\n                })\r\n                .catch(console.error);\r\n        }\r\n\r\n    }, [stop]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Berlin Transportation APP</h1>\r\n            <FormControl className=\"\">\r\n                <InputLabel htmlFor=\"input-with-icon-adornment\">Enter your stop.</InputLabel>\r\n                <Input\r\n                    value={stop}\r\n                    onChange={(event) => { setstop(event.target.value) }}\r\n                    id=\"input-with-icon-adornment\"\r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                            <PlaceIcon />\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <TableViewForStops data={stopsList} />\r\n        </div>\r\n    );\r\n};\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid } from '@material-ui/core';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\n\r\nexport default function TableViewForStopsDetails({ data }) {\r\n   \r\n    return (\r\n        <div className=\"main__div\" >\r\n            <h1>Possible stops</h1>\r\n            <Paper elevation={3} className=\"paper\" >\r\n            <TableContainer component={Card}>\r\n                <Table className=\"\" aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\">Direction</TableCell>\r\n                            <TableCell align=\"right\">Platform No.</TableCell>\r\n                            <TableCell align=\"right\">Scheduled Date</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((row) => (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell align=\"right\">{row.direction != null ? row.direction : \"NA\"}</TableCell>\r\n                                <TableCell align=\"right\">{row.platform != null ? row.platform : \"NA\"}</TableCell>\r\n                                <TableCell align=\"right\">{row.plannedWhen != null ? row.plannedWhen : \"NA\"}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                </Paper>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TableViewForStopsDetails from \"./TableViewForStopsDetails\"\r\nconst createClient = require(\"hafas-client\");\r\nconst vbbProfile = require(\"hafas-client/p/vbb\");\r\nconst StopDetails = () => {\r\n\r\n    const { stop } = useParams()\r\n    console.log(\"id\", stop);\r\n\r\n    const [departuresDetails, setdeparturesDetails] = useState([])\r\n    \r\n  useEffect(() => {\r\n    const client = createClient(vbbProfile, \"my-awesome-program\");\r\n    // S Charlottenburg\r\n    client\r\n      .departures(stop, { duration: 3 })\r\n        .then(data => {\r\n            console.log(data);\r\n            setdeparturesDetails(data)\r\n      })\r\n      .catch(console.error);\r\n  }, [ stop]);\r\n\r\n    return <div>\r\n        <TableViewForStopsDetails data={departuresDetails} />\r\n  </div>\r\n};\r\n\r\nexport default StopDetails;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./components/MainComponent\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StopDetails from \"./components/StopDetails\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n    renders the first one that matches the current URL. */}\n          <Switch>\n            \n            <Route path=\"/:stop\">\n              <StopDetails />\n            </Route>\n            <Route path=\"/\">\n              <MainComponent />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}