{"version":3,"sources":["components/FavouriteStopsComponent.js","components/TableViewForStopsComponents.js","components/MainComponent.js","components/TableViewForStopsDeparturesComponent.js","components/StopDetailsComponent.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["FavouriteStops","state","ids","useState","favouriteStops","setfavouriteStops","useEffect","arrayOfPromises","map","id","axios","get","then","stopsList","data","catch","console","error","undefined","Promise","all","current","className","length","style","Paper","elevation","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","display","TableBody","row","isHafasError","component","scope","name","products","bus","tram","ferry","suburban","express","regional","to","Math","random","TableViewForStops","setstate","idsFromLocalStorage","JSON","parse","localStorage","getItem","arraysOfIds","split","forEach","element","index","indexOf","splice","onClick","e","stopId","removeItem","setItem","stringify","window","location","reload","MainComponent","stop","setstop","setstopsList","FormControl","InputLabel","htmlFor","Input","autoFocus","value","onChange","event","target","startAdornment","InputAdornment","position","TableViewForStopsDetails","Card","direction","platform","plannedWhen","Date","toLocaleString","line","mode","operator","tripId","StopDetails","useParams","departuresDetails","setdeparturesDetails","App","path","exact","fetchCount","amount","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b5c00b8.chunk.js","sourcesContent":["import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\nimport axios from \"axios\"\r\n\r\n\r\nconst FavouriteStops = ({ state, ids }) => {\r\n    const [favouriteStops, setfavouriteStops] = useState([])\r\n    useEffect(() => {\r\n        let arrayOfPromises = ids?.map(id => (\r\n            axios.get(`https://berlin-trasnportation-app.herokuapp.com/api/stopdetails/${id}`)\r\n                .then(stopsList => stopsList.data)\r\n                .catch(console.error)\r\n        ))\r\n\r\n        if (arrayOfPromises !== undefined) {\r\n            Promise.all(arrayOfPromises).then(data => {\r\n                setfavouriteStops(current => [...current, ...data])\r\n            }\r\n            )\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            {/* Stops though favourite but if have no availability won't appear */}\r\n            {favouriteStops.length === 0 ? <p>No Favourite Stops</p> :\r\n                <div ><div style={{ \"margin\": \"24px\" }} ><strong>Favourite Stops with Availability</strong></div>\r\n                    <Paper elevation={3} className=\"paper\" >\r\n                        <TableContainer >\r\n                            <Table className=\"\" aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\">Stops</TableCell>\r\n                                        <TableCell align=\"center\">Bus</TableCell>\r\n                                        <TableCell align=\"center\">Tram</TableCell>\r\n                                        <TableCell align=\"center\">Ferry</TableCell>\r\n                                        <TableCell align=\"center\">Suburban</TableCell>\r\n                                        <TableCell align=\"center\">Express</TableCell>\r\n                                        <TableCell align=\"center\">Regional</TableCell>\r\n                                        <TableCell align=\"center\">See More</TableCell>\r\n                                        <TableCell style={{ display: \"none\" }}  align=\"center\">Mark Favourite</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {favouriteStops.map((row) => (\r\n                                        row === undefined || row?.isHafasError === true ? <></> :\r\n                                            <TableRow key={row.id ? row.id : Math.random()}>\r\n                                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                                    {row?.name}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\" >{row?.products?.bus === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\">{row?.products?.tram === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\">{row?.products?.ferry === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\">{row?.products?.suburban === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\"> {row?.products?.express === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\">{row?.products?.regional === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell align=\"center\"><Link to={row.id}>See more</Link></TableCell>\r\n\r\n                                            </TableRow>\r\n\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper></div>}\r\n\r\n            <div style={{ \"padding\": \"54px\" }}><strong>Created By Ujjwal For Fun</strong></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavouriteStops\r\n","import React, { useState } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Link } from \"react-router-dom\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavouriteStops from './FavouriteStopsComponent';\r\n\r\n\r\nexport default function TableViewForStops({ data }) {\r\n    const [state, setstate] = useState({})\r\n    const idsFromLocalStorage = JSON.parse(localStorage.getItem(\"Favourite\"))\r\n    const arraysOfIds = idsFromLocalStorage?.split(\"A\")\r\n\r\n    data.forEach(element => {\r\n        if (element.id === null) {\r\n            const index = data.indexOf(element)\r\n            data.splice(index, 1)\r\n        }\r\n\r\n    });\r\n\r\n    const setFav = (stopId) => {\r\n        localStorage.setItem(stopId, \"fav\")\r\n        localStorage.setItem(\"Favourite\", JSON.stringify(localStorage.getItem(\"Favourite\") ? JSON.parse(localStorage.getItem(\"Favourite\")) + \"A\" + stopId : stopId))\r\n        setstate({})\r\n        window.location.reload()\r\n    }\r\n\r\n    //there are high chances that a bug will appear when we remove elemenet from\r\n    //the first or last as it will has A at different position\r\n    const removeFav = (stopId) => {\r\n        localStorage.removeItem(stopId)\r\n        arraysOfIds?.splice(arraysOfIds.indexOf(stopId), 1)\r\n        localStorage.removeItem(\"Favourite\")\r\n        arraysOfIds?.forEach(element => {\r\n            if (arraysOfIds.length > 0 && element.length > 0) {\r\n                localStorage.setItem(\"Favourite\", JSON.stringify(localStorage.getItem(\"Favourite\") ? JSON.parse(localStorage.getItem(\"Favourite\")) + \"A\" + element : element))\r\n            }\r\n        });\r\n        setstate({})\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            <Paper elevation={3} className=\"paper\" >\r\n                <TableContainer >\r\n                    <Table className=\"\" aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">Stops</TableCell>\r\n                                <TableCell align=\"center\" >Bus</TableCell>\r\n                                <TableCell align=\"center\">Tram</TableCell>\r\n                                <TableCell align=\"center\">Ferry</TableCell>\r\n                                <TableCell align=\"center\">Suburban</TableCell>\r\n                                <TableCell align=\"center\">Express</TableCell>\r\n                                <TableCell align=\"center\">Regional</TableCell>\r\n                                <TableCell align=\"center\">See More</TableCell>\r\n                                <TableCell align=\"center\">Mark Favourite</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {data.map((row) => (\r\n                                <TableRow key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" >{row.products?.bus === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.tram === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.ferry === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.suburban === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\"> {row.products?.express === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.regional === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\"><Link to={row.id}>See more</Link></TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {localStorage.getItem(row.id) === \"fav\" ?\r\n                                            <FavoriteIcon onClick={e => { removeFav(row.id); }}>SetFav</FavoriteIcon> : <FavoriteBorderIcon onClick={e => { setFav(row.id) }}>RemFav</FavoriteBorderIcon>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <FavouriteStops state={state} ids={arraysOfIds} />\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TableViewForStops from \"./TableViewForStopsComponents\";\r\nimport { FormControl, Input, InputAdornment, InputLabel } from \"@material-ui/core\";\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\nimport axios from \"axios\"\r\n\r\nconst MainComponent = () => {\r\n    const [stop, setstop] = useState(\"Airport\");\r\n    const [stopsList, setstopsList] = useState([]);\r\n    useEffect(() => {\r\n        axios.get(`https://berlin-trasnportation-app.herokuapp.com/api/getlocation/${stop}`)\r\n            .then((stopsList) => { setstopsList(stopsList.data); })\r\n            .catch(console.error);\r\n    }, [stop]);\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ \"position\": \"sticky\", \"top\": 0, \"backgroundColor\": \"white\", \"padding\": \"10px\", \"zIndex\": 1 }}>\r\n                <h1 style={{ \"marginTop\": 0 }} >Berlin Transportation APP</h1>\r\n                <p style={{ \"marginTop\": \"-14px\", \"fontFamily\" : \"cursive\" }} ><strong>Your Guide to every stop in Berlin</strong></p>\r\n            </div>\r\n            <FormControl className=\"\">\r\n                <InputLabel htmlFor=\"input-with-icon-adornment\">Enter your stop.</InputLabel>\r\n                <Input\r\n                    autoFocus\r\n                    value={stop}\r\n                    onChange={(event) => { setstop(event.target.value) }}\r\n                    id=\"input-with-icon-adornment\"\r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                            <PlaceIcon />\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <TableViewForStops data={stopsList} />\r\n        </div>\r\n    );\r\n};\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Card } from '@material-ui/core';\r\nimport \"./TableViewForStops.css\"\r\n\r\nconst TableViewForStopsDetails = ({ data }) => {\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            <h1>Possible stops</h1>\r\n            {data.length > 0 ? <Paper elevation={3} className=\"paper\" >\r\n                <TableContainer component={Card}>\r\n                    <Table className=\"\" aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" >Direction</TableCell>\r\n                                <TableCell align=\"center\" >Platform No.</TableCell>\r\n                                <TableCell align=\"center\">Scheduled Date</TableCell>\r\n                                <TableCell align=\"center\">Mode</TableCell>\r\n                                <TableCell align=\"center\">Operator</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {data.map((row) => (\r\n                                <TableRow key={row.tripId}>\r\n                                    <TableCell align=\"right\">{row.direction != null ? row.direction : \"NA\"}</TableCell>\r\n                                    <TableCell align=\"center\">{row.platform != null ? row.platform : \"NA\"}</TableCell>\r\n                                    <TableCell align=\"center\">{row.plannedWhen != null ? new Date(row.plannedWhen).toLocaleString() : \"NA\"}</TableCell>\r\n                                    <TableCell align=\"center\">{row.line.mode != null ? row.line.mode : \"NA\"}</TableCell>\r\n                                    <TableCell align=\"center\">{row.line.operator.name != null ? row.line.operator.name : \"NA\"}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper> :\r\n                <h3>No Data Available</h3>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableViewForStopsDetails;\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TableViewForStopsDetails from \"./TableViewForStopsDeparturesComponent\"\r\nimport axios from \"axios\"\r\n\r\n\r\nconst StopDetails = () => {\r\n  const { stop } = useParams()\r\n  const [departuresDetails, setdeparturesDetails] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n    axios.get(`https://berlin-trasnportation-app.herokuapp.com/api/stopdepartures/${stop}`)\r\n    .then(data => {setdeparturesDetails(data.data)})\r\n    .catch(console.error);\r\n  }, [stop]);\r\n\r\n  return <div>\r\n    <TableViewForStopsDetails data={departuresDetails} />\r\n  </div>\r\n};\r\n\r\nexport default StopDetails;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./components/MainComponent\";\nimport { BrowserRouter as Router, HashRouter, Route } from \"react-router-dom\";\nimport StopDetails from \"./components/StopDetailsComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n    renders the first one that matches the current URL. */}\n          <HashRouter>\n            <Route path=\"/:stop\">\n              <StopDetails />\n            </Route>\n            <Route exact path=\"/\">\n              <MainComponent />\n            </Route>\n          </HashRouter>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}