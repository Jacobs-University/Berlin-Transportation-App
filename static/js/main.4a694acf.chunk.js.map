{"version":3,"sources":["components/FavouriteStopsComponent.js","components/TableViewForStopsComponents.js","components/MainComponent.js","components/TableViewForStopsDeparturesComponent.js","components/StopDetailsComponent.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["createClient","require","vbbProfile","FavouriteStops","state","ids","client","useState","favouriteStops","setfavouriteStops","useEffect","arrayOfPromises","map","id","stop","then","data","catch","console","error","undefined","Promise","all","current","className","length","style","Paper","elevation","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","display","TableBody","row","component","scope","name","products","bus","tram","ferry","suburban","express","regional","to","TableViewForStops","setstate","idsFromLocalStorage","JSON","parse","localStorage","getItem","arraysOfIds","split","forEach","element","index","indexOf","splice","align","onClick","e","stopId","removeItem","setItem","stringify","window","location","reload","MainComponent","setstop","stopsList","setstopsList","locations","results","FormControl","InputLabel","htmlFor","Input","autoFocus","value","onChange","event","target","startAdornment","InputAdornment","position","TableViewForStopsDetails","Card","direction","platform","plannedWhen","Date","toLocaleString","line","mode","operator","tripId","StopDetails","useParams","departuresDetails","setdeparturesDetails","departures","duration","App","path","exact","fetchCount","amount","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a694acf.chunk.js","sourcesContent":["import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\nconst createClient = require('hafas-client')\r\nconst vbbProfile = require('hafas-client/p/vbb')\r\n\r\n\r\nconst FavouriteStops = ({ state, ids }) => {\r\n    const client = createClient(vbbProfile, 'my-awesome-program')\r\n    const [favouriteStops, setfavouriteStops] = useState([])\r\n    useEffect(() => {\r\n        let arrayOfPromises = ids?.map(id => (\r\n            client.stop(id)\r\n                .then(data => data) //returning data\r\n                .catch(console.error)))\r\n\r\n        if (arrayOfPromises !== undefined) {\r\n            Promise.all(arrayOfPromises).then(data => {\r\n                setfavouriteStops(current => [...current, ...data])\r\n            }\r\n            )\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className=\"main__div\" >\r\n            {/* Stops though favourite but if have no availability won't appear */}\r\n            {favouriteStops.length === 0 ? <p>No Favourite Stops</p> :\r\n                <div ><div style={{ \"margin\": \"24px\" }} ><strong>Favourite Stops with Availability</strong></div>\r\n                    <Paper elevation={3} className=\"paper\" >\r\n                        <TableContainer >\r\n                            <Table className=\"\" aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Stops</TableCell>\r\n                                        <TableCell >Bus</TableCell>\r\n                                        <TableCell >Tram</TableCell>\r\n                                        <TableCell >Ferry</TableCell>\r\n                                        <TableCell >Suburban</TableCell>\r\n                                        <TableCell >Express</TableCell>\r\n                                        <TableCell >Regional</TableCell>\r\n                                        <TableCell >See More</TableCell>\r\n                                        <TableCell style={{ display: \"none\" }}  >Mark Favourite</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {favouriteStops.map((row) => (\r\n                                        row !== undefined ?\r\n                                            <TableRow key={row.id}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {row?.name}\r\n                                                </TableCell>\r\n                                                <TableCell >{row?.products?.bus === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell >{row?.products?.tram === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell >{row?.products?.ferry === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell >{row?.products?.suburban === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell > {row?.products?.express === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell >{row?.products?.regional === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                                <TableCell ><Link to={row.id}>See more</Link></TableCell>\r\n\r\n                                            </TableRow> : < ></>\r\n\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper></div>}\r\n\r\n            <div style={{ \"padding\": \"54px\" }}><strong>Created By Ujjwal For Fun</strong></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavouriteStops\r\n","import React, { useState } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Link } from \"react-router-dom\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport \"./TableViewForStops.css\"\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavouriteStops from './FavouriteStopsComponent';\r\n\r\n\r\nexport default function TableViewForStops({ data }) {\r\n\r\n    const [state, setstate] = useState({})\r\n    const idsFromLocalStorage = JSON.parse(localStorage.getItem(\"Favourite\"))\r\n    const arraysOfIds = idsFromLocalStorage?.split(\"A\")\r\n\r\n    data.forEach(element => {\r\n        if (element.id === null) {\r\n            const index = data.indexOf(element)\r\n            data.splice(index, 1)\r\n        }\r\n\r\n    });\r\n\r\n    const setFav = (stopId) => {\r\n        localStorage.setItem(stopId, \"fav\")\r\n        localStorage.setItem(\"Favourite\", JSON.stringify(localStorage.getItem(\"Favourite\") ? JSON.parse(localStorage.getItem(\"Favourite\")) + \"A\" + stopId : stopId))\r\n        setstate({})\r\n        window.location.reload()\r\n    }\r\n\r\n    //there are high chances that a bug will appear when we remove elemenet from\r\n    //the first or last as it will has A at different position\r\n    const removeFav = (stopId) => {\r\n        localStorage.removeItem(stopId)\r\n        arraysOfIds?.splice(arraysOfIds.indexOf(stopId), 1)\r\n        localStorage.removeItem(\"Favourite\")\r\n        arraysOfIds?.forEach(element => {\r\n            if (arraysOfIds.length > 0 && element.length > 0) {\r\n                localStorage.setItem(\"Favourite\", JSON.stringify(localStorage.getItem(\"Favourite\") ? JSON.parse(localStorage.getItem(\"Favourite\")) + \"A\" + element : element))\r\n            }\r\n        });\r\n        setstate({})\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            <Paper elevation={3} className=\"paper\" >\r\n                <TableContainer >\r\n                    <Table className=\"\" aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">Stops</TableCell>\r\n                                <TableCell align=\"center\" >Bus</TableCell>\r\n                                <TableCell align=\"center\">Tram</TableCell>\r\n                                <TableCell align=\"center\">Ferry</TableCell>\r\n                                <TableCell align=\"center\">Suburban</TableCell>\r\n                                <TableCell align=\"center\">Express</TableCell>\r\n                                <TableCell align=\"center\">Regional</TableCell>\r\n                                <TableCell align=\"center\">See More</TableCell>\r\n                                <TableCell align=\"center\">Mark Favourite</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {data.map((row) => (\r\n                                <TableRow key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" >{row.products?.bus === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.tram === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.ferry === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.suburban === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\"> {row.products?.express === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\">{row.products?.regional === true ? <DoneIcon /> : <ClearIcon></ClearIcon>}</TableCell>\r\n                                    <TableCell align=\"center\"><Link to={row.id}>See more</Link></TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {localStorage.getItem(row.id) === \"fav\" ?\r\n                                            <FavoriteIcon onClick={e => { removeFav(row.id); }}>SetFav</FavoriteIcon> : <FavoriteBorderIcon onClick={e => { setFav(row.id) }}>RemFav</FavoriteBorderIcon>}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n            <FavouriteStops state={state} ids={arraysOfIds} />\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport createClient from \"hafas-client\";\r\nimport vbbProfile from \"hafas-client/p/vbb\";\r\nimport TableViewForStops from \"./TableViewForStopsComponents\";\r\nimport { FormControl, Input, InputAdornment, InputLabel } from \"@material-ui/core\";\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\n\r\nconst MainComponent = () => {\r\n    const [stop, setstop] = useState(\"Airport\");\r\n    const [stopsList, setstopsList] = useState([]);\r\n    useEffect(() => {\r\n        const client = createClient(vbbProfile, \"my-awesome-program\");\r\n        if (stop !== \"\") {\r\n            client\r\n                .locations(stop, { results: 5 })\r\n                .then((stopsList) => {\r\n                    setstopsList(stopsList);\r\n                })\r\n                .catch(console.error);\r\n        }\r\n    }, [stop]);\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ \"position\": \"sticky\", \"top\": 0, \"backgroundColor\": \"white\", \"padding\": \"10px\", \"zIndex\": 1 }}>\r\n                <h1 style={{ \"marginTop\": 0 }} >Berlin Transportation APP</h1>\r\n            </div>\r\n            <FormControl className=\"\">\r\n                <InputLabel htmlFor=\"input-with-icon-adornment\">Enter your stop.</InputLabel>\r\n                <Input\r\n                    autoFocus\r\n                    value={stop}\r\n                    onChange={(event) => { setstop(event.target.value) }}\r\n                    id=\"input-with-icon-adornment\"\r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                            <PlaceIcon />\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <TableViewForStops data={stopsList} />\r\n        </div>\r\n    );\r\n};\r\nexport default MainComponent;\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Card } from '@material-ui/core';\r\nimport \"./TableViewForStops.css\"\r\n\r\nconst TableViewForStopsDetails = ({ data }) => {\r\n\r\n    return (\r\n        <div className=\"main__div\" >\r\n            <h1>Possible stops</h1>\r\n            {data.length > 0 ? <Paper elevation={3} className=\"paper\" >\r\n                <TableContainer component={Card}>\r\n                    <Table className=\"\" aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell >Direction</TableCell>\r\n                                <TableCell >Platform No.</TableCell>\r\n                                <TableCell >Scheduled Date</TableCell>\r\n                                <TableCell >Mode</TableCell>\r\n                                <TableCell >Operator</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {data.map((row) => (\r\n                                <TableRow key={row.tripId}>\r\n                                    <TableCell >{row.direction != null ? row.direction : \"NA\"}</TableCell>\r\n                                    <TableCell >{row.platform != null ? row.platform : \"NA\"}</TableCell>\r\n                                    <TableCell >{row.plannedWhen != null ? new Date(row.plannedWhen).toLocaleString() : \"NA\"}</TableCell>\r\n                                    <TableCell >{row.line.mode != null ? row.line.mode : \"NA\"}</TableCell>\r\n                                    <TableCell >{row.line.operator.name != null ? row.line.operator.name : \"NA\"}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper> :\r\n                <h3>No Data Available</h3>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableViewForStopsDetails;\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TableViewForStopsDetails from \"./TableViewForStopsDeparturesComponent\"\r\nconst createClient = require(\"hafas-client\");\r\nconst vbbProfile = require(\"hafas-client/p/vbb\");\r\nconst StopDetails = () => {\r\n  const { stop } = useParams()\r\n  const [departuresDetails, setdeparturesDetails] = useState([])\r\n\r\n  useEffect(() => {\r\n    const client = createClient(vbbProfile, \"my-awesome-program\");\r\n    // S Charlottenburg\r\n    client\r\n      .departures(stop, { duration: 3 })\r\n      .then(data => {\r\n        setdeparturesDetails(data)\r\n      })\r\n      .catch(console.error);\r\n  }, [stop]);\r\n\r\n  return <div>\r\n    <TableViewForStopsDetails data={departuresDetails} />\r\n\r\n  </div>\r\n};\r\n\r\nexport default StopDetails;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./components/MainComponent\";\nimport { BrowserRouter as Router, HashRouter, Route } from \"react-router-dom\";\nimport StopDetails from \"./components/StopDetailsComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n    renders the first one that matches the current URL. */}\n          <HashRouter>\n            <Route path=\"/:stop\">\n              <StopDetails />\n            </Route>\n            <Route exact path=\"/\">\n              <MainComponent />\n            </Route>\n          </HashRouter>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}